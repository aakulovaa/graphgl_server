type Query {
    allEvents: [Event]
    oneEvent(idEvent: ID!): Event

    allCities: [CityEvent]
    oneCity(idCity: ID!): CityEvent

    allCategories: [CategoryEvent]
    oneCategory(idCategory: ID!): CategoryEvent

    allChats: [Chats]
    oneChat(idChat: ID!): Chats

    allNews: [News]
    oneNews(idNews: ID!): News

    allNotifications: [Notifications]
    oneNotification(idNotification: ID!): Notifications

    allUsers: [Users]
    oneUser(idUser: ID!): Users
}

type Mutation {
    createEvent(nameEvent: String, dateEvent:String,
        cityId: ID!, addressEvent: String,
        descriptionEvent: String, countOfPeople: Int,
        categoryId: ID!, imageEvent: String): Event!
    updateEvent(idEvent: ID!, nameEvent: String, dateEvent:String,
    cityId: ID, addressEvent: String,
    descriptionEvent: String, countOfPeople: Int,
    categoryId: ID, imageEvent: String): Event!
    deleteEvent(idEvent:ID!): Boolean

    createCity(nameCity: String): CityEvent!
    updateCity(idCity: ID!, nameCity:String): CityEvent!
    deleteCity(idCity: ID!): Boolean

    createCategory(nameCategory: String): CategoryEvent!
    updateCategory(idCategory: ID!, nameCategory: String): CategoryEvent!
    deleteCategory(idCategory: ID!): Boolean

    createChat(userSenderId: ID!, userReceiverId: ID!, messageChat: String,sendAt: String ): Chats!
    updateChat(idChat: ID!, userSenderId: ID!, userReceiverId: ID!, messageChat: String,sendAt: String): Chats!
    deleteChat(idChat: ID!): Boolean

    createNews(userNewsId: ID!, titleNews: String, descNews: String, imgSrcNews: String, createdAt: String): News!
    updateNews(idNews: ID!, userNewsId: ID!, titleNews: String, descNews: String, imgSrcNews: String, createdAt: String): News!
    deleteNews(idNews: ID!): Boolean

    createNotification(userNotificationId: ID!, nameNotification: String, imgSrcNotification: String): Notifications!
    updateNotification(idNotification: ID!, userNotificationId: ID!,
        nameNotification: String, imgSrcNotification: String): Notifications!
    deleteNotification(idNotification: ID!): Boolean

    createUser(loginUser: String, emailUser: String, passwordUser: String,
        accountType: String, imageSrcUser: String,
        countOfSubscribers: Int, countOfSubscription: Int, countOfPublishedEvents: Int): Users!
    updateUser(idUser: ID!, loginUser: String, emailUser: String, passwordUser: String,
        accountType: String, imageSrcUser: String,
        countOfSubscribers: Int, countOfSubscription: Int, countOfPublishedEvents: Int): Users
    deleteUser(idUser: ID!): Boolean
}

type Event {
    idEvent: ID!
    nameEvent: String
    dateEvent: String
    cityEvent: CityEvent
    addressEvent: String
    descriptionEvent: String
    countOfPeople: Int
    categoryEvent: CategoryEvent
    imageEvent: String
}

type CityEvent {
    idCity: ID!
    nameCity: String
    events: [Event]
}

type CategoryEvent {
    idCategory: ID!
    nameCategory: String
    events: [Event]
}

type Chats {
    idChat: ID!
    userSender: Users
    userReceiver: Users
    messageChat: String
    sendAt: String
}

type News {
    idNews: ID!
    userNews: Users
    titleNews: String
    descNews: String
    imgSrcNews: String
    createdAt: String
}

type Notifications {
    idNotification: ID!
    userNotification: Users
    nameNotification: String
    imgSrcNotification: String
}

type Users {
    idUser: ID!
    loginUser: String
    emailUser: String
    passwordUser: String
    accountType: String
    imageSrcUser: String
    countOfSubscribers: Int
    countOfSubscription: Int
    countOfPublishedEvents: Int
    newsUser: [News]
    sentMessages: [Chats]
    receivedMessages: [Chats]
    notifUser: [Notifications]
}